--MEDKIT/BANDAGE USING LOGIC
--BY VODOXLEB
--------------------------------------
actid = 188124
evaid = 188124
--------------------------------------
local bandages = {
	["bandage"] = true,
	["jgut"] = true,
	-- New Medkits and Bandages
	["colbandage"] = true,
	["prebandage"] = true,
	["rag"] = true,
	["bandaids"] = true,
	-- Drugs That Make Sense
	["aloe_bandage"] = true,
}
local medkits = {
	["medkit"] = true,
	["medkit_army"] = true,
	["medkit_scientific"] = true,
	["stimpack"] = true,
	["stimpack_army"] = true,
	["stimpack_scientific"] = true,
	-- New Medkits and Bandages
	["civmedkit"] = true,
	["tacmedkit"] = true,
	-- Faction Medkits
	["dutymedkit"] = true,
	["banditmedkit"] = true,
	["freedommedkit"] = true,
	["mercmedkit"] = true,
	["monolithmedkit"] = true,
	["clearskymedkit"] = true,
	["sinmedkit"] = true,
	["renegademedkit"] = true,
	["isgmedkit"] = true,	
}
modenable = true
allow_bandage = true
allow_medkit = true
medkit_health_threshold = 0.65
enable_cheat = false
debug = false

function on_option_change()
	modenable = medkit_bandage_heal_mcm.get_config("enable")
	allow_bandage = medkit_bandage_heal_mcm.get_config("enablebandage")
	allow_medkit = medkit_bandage_heal_mcm.get_config("enablemedkit")
	medkit_health_threshold = medkit_bandage_heal_mcm.get_config("med_health_thres")
	enable_cheat = medkit_bandage_heal_mcm.get_config("cheatnpc")
	debug = medkit_bandage_heal_mcm.get_config("enabledebug")
end

class "evaluator_npc_otheal" (property_evaluator)
function evaluator_npc_otheal:__init(npc,name,storage) super (nil, name)
	self.st = storage
end

function evaluator_npc_otheal:evaluate()
	local npc = self.object
	if not modenable then
		return false
	end
	if not npc then
		return false
	end
		
	if not (npc:alive()) then 
		return false 
	end
	
		
	if (IsWounded(npc)) then
		if debug then
			printf("[NPC HEALING] wounded")
		end
		return false 
	end
	
	local enemy = npc:best_enemy()
	if enemy then
		if debug then
			printf("[NPC HEALING] has enemy")
		end
		return false
	end
	
	if npc:mental_state() ~= anim.free then
		if debug then
			printf("[NPC HEALING] not free %s", npc:mental_state())
		end
		return false
	end
	
	if npc:body_state() ~= move.standing then
		if debug then
			printf("[NPC HEALING] not standing %s", npc:body_state())
		end
		return false
	end
	
	if xr_danger.has_danger(npc) then
		if debug then
			printf("[NPC HEALING] in danger")
		end
		return false
	end
	
	if self.st.selected_med then
		return true
	end
	if (allow_bandage) and (npc.bleeding > 0.15) then
		for k,v in pairs(bandages) do
			if npc:object(k) then
				self.st.selected_med = "bandage"
				self.st.selected_id = npc:object(k):id()
				return true
			end	
		end
		if enable_cheat then
			alife_create_item("bandage", npc)
		end
		if debug then
			printf("[NPC HEALING] no bandages")
		end
	end
	
	if (allow_medkit) and (npc.health < medkit_health_threshold) then
		for k,v in pairs(medkits) do
			if npc:object(k) then
				self.st.selected_med = "medkit"
				self.st.selected_id = npc:object(k):id()
				return true
			end
		end
		if enable_cheat then
			alife_create_item("medkit", npc)
		end
		if debug then
			printf("[NPC HEALING] no medkit")
		end
	end
	
	return false
end

class "action_npc_otheal" (action_base)
function action_npc_otheal:__init (npc,name,storage) super (nil,name)
	self.st = storage
end

function action_npc_otheal:initialize()
	action_base.initialize(self)
	local npc = self.object
	if debug then
		printf("[NPC HEALING] init healing")
	end
	npc:set_desired_position()
	--npc:set_desired_direction()
	local id = npc:id()
	local st = db.storage[id]
	st.healing = true
	npc:set_path_type(game_object.level_path)
	state_mgr.set_state(npc,self.st.state,nil,nil,nil,{fast_set = true})
end

function action_npc_otheal:execute()
	action_base.execute(self)
	local npc = self.object
	local tg = time_global()
	if self.st.selected_med == "medkit" then
		if debug then
			printf("[NPC HEALING] medkit")
		end
		state_mgr.set_state(npc,"medkit_heal",nil,nil,nil,{fast_set = true, animation = true})
		if not self.st._timer then
			utils_obj.add_anim(npc,"dmg_norm_torso_1_idle_1")
			npc:clear_animations()
			npc:movement_enabled(false)
			self.st._timer = tg + 3500
		end
		if self.st._timer < tg then
			if debug then
				printf("[NPC HEALING] fin")
			end
			npc:clear_animations()
			npc:movement_enabled(true)
			npc.health = 1
			alife_release_id(self.st.selected_id)
			self.st.selected_id = nil
			self.st.selected_med = nil
			self.st._timer = nil
		end
	end
	if self.st.selected_med == "bandage" then
		if debug then
			printf("[NPC HEALING] bandage")
		end
		state_mgr.set_state(npc,"bandage_heal",nil,nil,nil,{fast_set = true, animation = true})
		if not self.st._timer then
			utils_obj.add_anim(npc,"dmg_norm_torso_1_idle_1")
			npc:clear_animations()
			npc:movement_enabled(false)
			self.st._timer = tg + 7500
		end
		if self.st._timer < tg then
			if debug then
				printf("[NPC HEALING] fin")
			end
			npc.bleeding = 0
			npc:clear_animations()
			npc:movement_enabled(true)
			alife_release_id(self.st.selected_id)
			self.st.selected_id = nil
			self.st.selected_med = nil
			self.st._timer = nil
		end
	end
end

function action_npc_otheal:finalize()
	action_base.finalize(self)
	if debug then
		printf("[NPC HEALING]finalize")
	end
	local npc = self.object
	local id = npc:id()
	local st = db.storage[id]
	st.healing = false
	if npc then
		npc:clear_animations()
		npc:movement_enabled(true)
	end
	self.st.selected_id = nil
	self.st.selected_med = nil
	self.st._timer = nil
	self.object:set_desired_position()
	self.object:set_desired_direction()
end

function setup_generic_scheme(npc,ini,scheme,section,stype,temp)
	local st = xr_logic.assign_storage_and_bind(npc,ini,"npc_otheal",section,temp)
end

function add_to_binder(npc,ini,scheme,section,storage,temp)
	local manager = npc:motivation_action_manager()
	
	if (not npc:alive()) or (npc:character_community() == "zombied" or npc:section() == "actor_visual_stalker") then
		manager:add_evaluator(evaid,property_evaluator_const(false))
	else
		manager:add_evaluator(evaid,evaluator_npc_otheal(npc,"eva_npc_otheal",storage))
	end 
	
	temp.action = action_npc_otheal(npc,"act_npc_otheal",storage)
	
	temp.action:add_precondition(world_property(stalker_ids.property_alive,true))
	temp.action:add_precondition(world_property(stalker_ids.property_danger, false))
	temp.action:add_precondition(world_property(stalker_ids.property_anomaly,false))
	temp.action:add_precondition(world_property(stalker_ids.property_enemy,false))
	temp.action:add_precondition(world_property(evaid,true))
	
	temp.action:add_effect(world_property(evaid,false))
	
	manager:add_action(actid,temp.action)
end

function configure_actions(npc,ini,scheme,section,stype,temp)
	temp.action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	temp.action:add_precondition(world_property(xr_evaluators_id.wounded_exist,false))

	local manager = npc:motivation_action_manager()
	local action	
	local p = {
				stalker_ids.action_combat_planner, 
				xr_actions_id.state_mgr + 2,
				xr_actions_id.alife
	}

	for i=1,#p do
		action = manager:action(p[i])
		if (action) then
			action:add_precondition(world_property(evaid,false))
		end
	end
end
	
function disable_generic_scheme(npc,scheme,stype)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end

function npc_add_precondition(action)
	action:add_precondition(world_property(evaid,false))
end

LoadScheme("axr_otheal",		"npc_otheal",				modules.stype_stalker)
function on_game_start()
	RegisterScriptCallback("on_option_change", on_option_change)
	on_option_change()
end